?plot
plot(sqrt)
plot(log)
df <- data.frame(x=1:20, y=sqrt(x))
df <- data.frame(x=1:20, y=sqrt(1:20))
plot(df)
df <- data.frame(x=1:20, y=sqrt(1:20), z=(1:20)^1/3)
plot(df)
df <- data.frame(x=1:20, y=sqrt(1:20), z=(1:20)^2)
plot(df)
plot("hello")
x <- 1:20
y <- sqrt(x)
z <- x^2
f <- sqrt
d <- data.frame(x, y, z)
plot(x, y)
plot(y)
plot(f)
plot(x, f(x))
apply( c(f,x,y,z,d), class)
sapply( c(f,x,y,z,d), class)
sapply( list(f,x,y,z,d), class)
class(2.1)
funcs <- c(sqrt, log, lm, svd)
class(funcs)
str(funcs)
structure(funcs)
?str
?structure
?c
class(sqrt)
typeof(sqrt)
?typeof
?class
str(sqrt)
sqrt
?.Primitive
x <- seq(0,1,length=100)
plot(c(-0.1, 0, x, 1, 1.1), c(0,0,dunif(x),0,0), type='l')
N <- 1000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, rnorm(N), numeric(k)) )
ss <- rowSums(M * M)
hist(ss)
}
N
rnorm(10)
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss)
}
N <- 1000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss. breaks=0:20, xlim=c(0,20))
}
N <- 1000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss, breaks=0:20, xlim=c(0,20))
}
N <- 1000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss, breaks=0:20, xlim=c(0,15))
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss, breaks=0:16, xlim=c(0,20), main=paste("k =", k))
}
N <- 1000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
}
?hist
library(ggplot2)
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
# hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
ggplot( aes(x=ss) ) + geom_hist()
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
# hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
ggplot(data.frame(ss), aes(x=ss) ) + geom_hist()
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
# hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
ggplot(data.frame(ss), aes(x=ss) ) + geom_histogram()
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
# hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
ggplot(data.frame(ss), aes(x=ss) ) + geom_histogram()
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
# hist(ss, breaks=100, xlim=c(0,15), main=paste("k =", k))
ggplot(data.frame(ss), aes(x=ss) ) + geom_histogram()
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) + geom_histogram()
plot(g)
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.5) + opts(title = paste("k =", k))
plot(g)
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.5) + theme(title = paste("k =", k))
plot(g)
}
?element_text
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.5) + labs(title = paste("k =", k))
plot(g)
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.5) +
labs(title = paste("k =", k)) +
xlim(0,15)
plot(g)
}
N <- 100000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.5) +
labs(title = paste("k =", k)) +
xlim(0,15)
plot(g)
}
N <- 100000
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.01) +
labs(title = paste("k =", k)) +
xlim(0,15)
plot(g)
}
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.1) +
labs(title = paste("k =", k)) +
xlim(0,15)
plot(g)
}
N <- 1e6
for (k in c(1,2,3,4,6,9)){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
g <- ggplot(data.frame(ss), aes(x=ss) ) +
geom_histogram(binwidth=0.1) +
labs(title = paste("k =", k)) +
xlim(0,15)
plot(g)
}
as.data.frame( list(a=1:3, b=4:6))
N <- 1e3
d <- do.call("rbind", lapply( k_vals, function(k){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
data.frame(k, ss)
}))
k_vals <- c(1,2,3,4,6,9)
N <- 1e3
d <- do.call("rbind", lapply( k_vals, function(k){
M <- cbind( vapply(1:k, function(i) rnorm(N), numeric(N)) )
ss <- rowSums(M * M)
data.frame(k, ss)
}))
d
g <- ggplot(d, aes(x=ss, col=k)) + geom_density()
g
head(d)
g <- ggplot(d, aes(x=ss, col=as.factor(k)) + geom_density()
)
g <- ggplot(d, aes(x=ss, col=as.factor(k))) + geom_density()
g
parent_distribution <- function(n) runif(n)
N <- 1000
k_vals <- c(2,3,4,8,16,32)
d <- do.call("rbind", lapply( k_vals, function(n){
M <- cbind( vapply(1:k, function(i) parent_distribution(N), numeric(N)) )
ss <- rowMeans(M)
data.frame(k, ss)
}))
g <- ggplot(d, aes(x=ss, col=as.factor(k))) + geom_density()
g
head(d)
rm(d)
parent_distribution <- function(n) runif(n)
N <- 1000
k_vals <- c(2,3,4,8,16,32)
d <- do.call("rbind", lapply( k_vals, function(n){
M <- cbind( vapply(1:k, function(i) parent_distribution(N), numeric(N)) )
ss <- rowMeans(M)
data.frame(k, ss)
}))
g <- ggplot(d, aes(x=ss, col=as.factor(k))) + geom_density()
head(d)
tail(d)
d <- do.call("rbind", lapply( k_vals, function(k){
M <- cbind( vapply(1:k, function(i) parent_distribution(N), numeric(N)) )
ss <- rowMeans(M)
data.frame(k, ss)
}))
g <- ggplot(d, aes(x=ss, col=as.factor(k))) + geom_density()
g
N <- 1e5
k_vals <- c(2,3,4,8,16,32)
d <- do.call("rbind", lapply( k_vals, function(k){
M <- cbind( vapply(1:k, function(i) parent_distribution(N), numeric(N)) )
ss <- rowMeans(M)
data.frame(k, ss)
}))
d$k <- as.factor(d$k)
g <- ggplot(d, aes(x=ss, col=k)) + geom_density()
g
g + labs(title="parent distribution = uniform")
?rexp
parent_distribution <- function(n) rexp(n)
N <- 1e5
k_vals <- c(2,3,4,8,16,32)
d <- do.call("rbind", lapply( k_vals, function(k){
M <- cbind( vapply(1:k, function(i) parent_distribution(N), numeric(N)) )
ss <- rowMeans(M)
data.frame(k, ss)
}))
d$k <- as.factor(d$k)
g <- ggplot(d, aes(x=ss, col=k)) + geom_density()
g + labs(title="parent distribution = uniform")
parent_distribution <- rexp
unparse(parent_distribution)
deparse(parent_distribution)
parent_distribution <- eval(parse(text="runif"))
x
plot(x, pnorm(x), type='l')
x <- seq(-100, 100, length=1000)
plot(x, pnorm(x), type='l')
x <- seq(-10, 10, length=1000)
plot(x, pnorm(x), type='l')
plot(x, ppois(x), type='l')
plot(x, ppois(x, lambda=10), type='l')
plot(x, ppois(x, lambda=1), type='l')
positive_predictive_value <- function(sensitivity, specificity, prevalence)
sensitivity*prevalence/(sensitivity*prevalence + (1-specificity) * (1-prevalence))
positive_predictive_value(sensitivity=0.98, specificity=0.95, prevalence=0.001)
positive_predictive_value(sensitivity=0.99, specificity=0.99, prevalence=0.005)
paste("*",list.files(), collapse="\n")
paste("*",list.files(), collapse="\\n")
?raw
?vector
?factor
foo <- factor(letters[1:3])
foo
class(foo)
typeof(foo)
?list
.Options
class(.Options)
typeof(.Options)
?pairlist
?for
()
help("for")
help("function")
?function
()
""
plotlines <- function(...) plot(..., type="l")
plotlines(1:20, sqrt(1:20))
plotlines(1:20, sqrt(1:20), type="n")
q()
q
e
ls()
foo
typeof(foo)
class(foo)
?typeof
sqrt(-1)
sqrt(complex(-1))
sqrt(as.complex(-1))
sqrt(-1 + 0i)
as.complex(-1)
types <-c("logical", "integer", "numeric", "character")
type_examples <- lapply(types, function(typ) vector(typ, 3))
type_examples
?outer
outer(type_examples, type_examples, paste)
class(outer(type_examples, type_examples, paste))
outer(type_examples, type_examples, paste)
outer(type_examples, type_examples, function(v1,v2) class(c(v1,v2)))
foo <- function(v1,v2) class(c(v1,v2))
foo(type_examples, type_examples)
outer(type_examples, type_examples, function(v1,v2) c(v1,v2))
outer(type_examples, type_examples, function(v1,v2) paste(v1,v2))
v1 <- c(FALSE, FALSE, FALSE)
v2 <- c(0, 0, 0)
sapply(type_example, class)
sapply(type_examples, class)
c(v1,v1)
class(c(v1,v1))
class(c(v1,v2))
c(v1,v2)
rep(v1,3)
for (i in seq_along(type_examples)) for (j in seq_along(type_examples))
)
row_i <- col_j <- seq_along(type_examples)
row_i
col_j
n <- length(type_examples)
M <- matrix(character(n^2), nrow=n)
for (i in 1:n)
for (j in 1:n)
M[i,j] = class(c(type_examples[i], type_examples[j]))
M
type_examples[i]
i
i <- 1
j <- 2
c(type_examples[i], type_examples[j])
n <- length(type_examples)
M <- matrix(character(n^2), nrow=n)
for (i in 1:n)
for (j in 1:n)
M[i,j] = class(c(type_examples[[i]], type_examples[[j]]))
M
outer(type_examples, type_examples, function(v1,v2) class(c(v1[[1]],v2[[1]])))
?mapply
outer(type_examples, type_examples,
function(v1,v2)
mapply(function(e1,e2) class(c(e1,e2)), v1, v2 ))
?typeof
types <-c("logical", "integer", "numeric", "complex", "character", "raw")
type_examples <- lapply(types, function(typ) vector(typ, 1))
n <- length(type_examples)
M <- matrix(character(n^2), nrow=n)
for (i in 1:n)
for (j in 1:n)
M[i,j] = class(c(type_examples[[i]], type_examples[[j]]))
outer(type_examples, type_examples,
function(v1,v2)
mapply(function(e1,e2) class(c(e1,e2)), v1, v2 ))
types <-c("raw", "logical", "integer", "numeric", "complex", "character")
type_examples <- lapply(types, function(typ) vector(typ, 1))
outer(type_examples, type_examples,
function(v1,v2)
mapply(function(e1,e2) class(c(e1,e2)), v1, v2 ))
type_examples <- lapply(rev(types), function(typ) vector(typ, 1))
type_examples
rev(types)
types
outer(type_examples, type_examples,
function(v1,v2)
mapply(function(e1,e2) class(c(e1,e2)), v1, v2 ))
vector_types <-c("raw", "logical", "integer", "numeric", "complex", "character", "list")
type_examples <- lapply(vector_types, function(vtyp) vector(vtyp, 1))
outer(type_examples, type_examples,
function(v1,v2)
mapply(function(e1,e2) class(c(e1,e2)), v1, v2 ))
list(letters[1:3], letters[4:6])
ll <-  list(letters[1:3], letters[4:6])
class(ll)
typeof(ll)
class(1:3)
length(ll)
str(ll)
str(letters)
foo <- as.factor(letters)
class(foo)
type(foo)
typeof(foo)
?special
help("special")
typeof(NULL)
mode(foo)
foo
typeof(foo)
typeof(function(v) v+1)
mode(function(v) v+1)
str <- "the quick brown fox"
strsplit(str, " ")
str <- list(drugs=c("acetaminophen", "loratidine"), surgery=c("appendectomy", "circumcision"))
str
strsplit(str, "")
strsplit('', str)
?strsplit
drugs <- c("acetaminophen:10mg", "loratidine:2mg")
strsplit(drugs, ':')
strsplit("hemorrhoids hangnails and halitosis", " ")[[1]][4]
strsplit("hemorrhoids hangnails and halitosis", "\\w")[[1]][4]
strsplit("hemorrhoids hangnails and halitosis", "\\W")[[1]][4]
strsplit("hemorrhoids hangnails and halitosis", "\\W")
strsplit("Hal has hemorrhoids, hangnails and halitosis.", "\\W+")[[1]][6]
Medications<- c("Indomethacin, 50mg bid, 12/10/2003"
"Acetaminophen, 1-2 tablets as needed, 03/28/2005")
Medications<- c("Indomethacin, 50mg bid, 12/10/2003"
"Acetaminophen, 1-2 tablets as needed, 03/28/2005")
Medications<- c("Indomethacin, 50mg bid, 12/10/2003",
"Acetaminophen, 1-2 tablets as needed, 03/28/2005")
strsplit(Medications)
strsplit(Medications, ", ")
?if
""
help("if")
class(TRUE)
typeof(TRUE)
str(TRUE)
age <- 15:20
ifelse (age < 18, "juvenile", "adult")
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x <- rcauchy(10)
centre(x, "mean")
centre(x, "median")
centre(x, "trimmed")
ccc <- c("b","QQ","a","A","bb")
# note: cat() produces no output for NULL
for(ch in ccc)
cat(ch,":", switch(EXPR = ch, a = 1, b = 2:3), "\n")
for(ch in ccc)
cat(ch,":", switch(EXPR = ch, a =, A = 1, b = 2:3, "Otherwise: last"),"\n")
gender <- c("M","M","F","M","F")
age <- 15:19
ifelse( gender=="F" & age > 18, "YES", "NO")
paste(gender, age)
ints <- 1:10
ints[ints %% 3 == 0]
patients <- data.frame(
name = c("Alice", "Bob", "Carol"),
age = c(89, 29, 19),
sex = c("F", "M", "F")
)
patients
patients[['name']]
patients['name']
class(patients)
class(patients['name'])
str(patients)
patients[1,"age"]
patients["1","age"]
rowames(patients)
rownames(patients)
foo <- data.frame( name=c(foo="Abe", bar="Bet", baz="Cai"), age=c(foo=26, bar=16, baz=56))
foo
foo <- data.frame( name=c(foo="Abe", bar="Bet", baz="Cai"), age=c(bi=26, bim=16, bop=56))
foo
foo <- data.frame( name=c("Abe", "Bet", "Cai"), age=c(bi=26, bim=16, bop=56))
foo
attr(patients)
attributes(patients)
colnames
class(2L)
class(2)
names
class(colnames)
attributes(colnames)
typeof(colnames)
typeof(names)
vignettes()
vignette()
vignette("knit-expand")
vignette("knit_expand")
vignette("knit-intro")
vignette("knitr-intro")
vignette("knitr-refcard")
help("purl")
>vignette
?vignette
vignette(introduction, package="dplyr")
vignette("introduction", package="dplyr")
?apropos
vignette("tidy-data", package="tidyr")
